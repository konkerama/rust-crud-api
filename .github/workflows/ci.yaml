name: 'CI'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: write

jobs:
  lint_test:
    name: 'Lint and Test'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: âš¡ Cache
      uses: actions/cache@v2
      with:
        path: |
          /home/runner/.cargo/registry
          /home/runner/.cargo/git
          rust/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

    - uses: actions-rs/cargo@v1
      with:
        command: install
        args: sqlx-cli

    - name: Check Format
      run: cargo fmt --check

    - name: Install dependencies
      run: ./test.sh

  identify_new_version:
    name: Identify New Release
    runs-on: ubuntu-latest
    outputs: 
      NEW_RELEASE: ${{ steps.taggerDryRun.outputs.new_tag }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Minor version for each merge
      id: taggerDryRun
      uses: anothrNick/github-tag-action@1.67.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DRY_RUN: true
        DEFAULT_BUMP: patch

    - name: echo new tag
      run: |
        echo "The next tag version will be: ${{ steps.taggerDryRun.outputs.new_tag }}"
    - name: echo tag
      run: |
        echo "The current tag is: ${{ steps.taggerDryRun.outputs.tag }}"
    - name: echo part
      run: |
        echo "The version increment was: ${{ steps.taggerDryRun.outputs.part }}"


  docker_build_push:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [lint_test, identify_new_version]
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
          tags: ${{ github.repository }}:${{github.sha}}, ${{ github.repository }}:${{needs.identify_new_version.outputs.NEW_RELEASE}}
          cache-from: type=gha
          cache-to: type=gha,mode=
          
  bump_up_version:
    name: Bump up Release
    runs-on: ubuntu-latest
    needs: docker_build_push
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Minor version for each merge
      id: taggerDryRun
      uses: anothrNick/github-tag-action@1.67.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: patch

    - name: echo new tag
      run: |
        echo "The next tag version will be: ${{ steps.taggerDryRun.outputs.new_tag }}"
    - name: echo tag
      run: |
        echo "The current tag is: ${{ steps.taggerDryRun.outputs.tag }}"
    - name: echo part
      run: |
        echo "The version increment was: ${{ steps.taggerDryRun.outputs.part }}"

    - name: create release
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"\
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ steps.taggerDryRun.outputs.new_tag }}","target_commitish":"main","name":"${{ steps.taggerDryRun.outputs.new_tag }}","body":"Description of the release","draft":false,"prerelease":false,"generate_release_notes":false}'